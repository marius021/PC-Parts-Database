-- =======================================================
-- Schema: PC Components Supplier (Oracle 21c XE)
-- Core + Standards Taxonomy (no laptop tables)
-- =======================================================

-- Safety first: drop objects if they exist (ignore errors)
BEGIN EXECUTE IMMEDIATE 'DROP TABLE RMA CASCADE CONSTRAINTS'; EXCEPTION WHEN OTHERS THEN NULL; END;
/ 
BEGIN EXECUTE IMMEDIATE 'DROP TABLE EXPEDIERE CASCADE CONSTRAINTS'; EXCEPTION WHEN OTHERS THEN NULL; END;
/ 
BEGIN EXECUTE IMMEDIATE 'DROP TABLE CV_LINIE CASCADE CONSTRAINTS'; EXCEPTION WHEN OTHERS THEN NULL; END;
/ 
BEGIN EXECUTE IMMEDIATE 'DROP TABLE COMANDA_VANZARE CASCADE CONSTRAINTS'; EXCEPTION WHEN OTHERS THEN NULL; END;
/ 
BEGIN EXECUTE IMMEDIATE 'DROP TABLE STOC CASCADE CONSTRAINTS'; EXCEPTION WHEN OTHERS THEN NULL; END;
/ 
BEGIN EXECUTE IMMEDIATE 'DROP TABLE DEPOZIT CASCADE CONSTRAINTS'; EXCEPTION WHEN OTHERS THEN NULL; END;
/ 
BEGIN EXECUTE IMMEDIATE 'DROP TABLE PRODUS_STANDARD CASCADE CONSTRAINTS'; EXCEPTION WHEN OTHERS THEN NULL; END;
/ 
BEGIN EXECUTE IMMEDIATE 'DROP TABLE STANDARD CASCADE CONSTRAINTS'; EXCEPTION WHEN OTHERS THEN NULL; END;
/ 
BEGIN EXECUTE IMMEDIATE 'DROP TABLE PRODUS CASCADE CONSTRAINTS'; EXCEPTION WHEN OTHERS THEN NULL; END;
/ 
BEGIN EXECUTE IMMEDIATE 'DROP TABLE CATEGORIE CASCADE CONSTRAINTS'; EXCEPTION WHEN OTHERS THEN NULL; END;
/ 
BEGIN EXECUTE IMMEDIATE 'DROP TABLE PRODUCATOR CASCADE CONSTRAINTS'; EXCEPTION WHEN OTHERS THEN NULL; END;
/ 
BEGIN EXECUTE IMMEDIATE 'DROP TABLE CLIENT CASCADE CONSTRAINTS'; EXCEPTION WHEN OTHERS THEN NULL; END;
/ 

-- =======================================================
-- MASTER DATA
-- =======================================================

CREATE TABLE PRODUCATOR(
  producator_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  nume          VARCHAR2(120) NOT NULL,
  tara          VARCHAR2(60),
  website       VARCHAR2(200),
  CONSTRAINT uq_producator_nume UNIQUE (nume)
);

CREATE TABLE CATEGORIE(
  categorie_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  nume         VARCHAR2(80) NOT NULL,
  descriere    VARCHAR2(4000),
  CONSTRAINT uq_categorie_nume UNIQUE (nume)
);

-- Standardized taxonomy (socket, memory type, form factor, interface, etc.)
CREATE TABLE STANDARD(
  standard_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  grup        VARCHAR2(40)  NOT NULL,         -- e.g., SOCKET_CPU, MEM_TYPE, FORM_FACTOR_MB, INTERFATA
  cod         VARCHAR2(60)  NOT NULL,         -- e.g., AM5, LGA1700, DDR5, ATX, PCIe x16, SATA, M.2 2280
  descriere   VARCHAR2(4000),
  CONSTRAINT uq_standard_grup_cod UNIQUE (grup, cod)
);

CREATE TABLE PRODUS(
  produs_id     NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  cod_sku       VARCHAR2(40) NOT NULL,
  denumire      VARCHAR2(200) NOT NULL,
  categorie_id  NUMBER NOT NULL,
  producator_id NUMBER,
  garantie_luni NUMBER DEFAULT 24 CHECK (garantie_luni BETWEEN 0 AND 60),
  status        VARCHAR2(20) DEFAULT 'ACTIV' CHECK (status IN ('ACTIV','INACTIV')),
  CONSTRAINT uq_produs_sku UNIQUE (cod_sku),
  CONSTRAINT fk_produs_categorie  FOREIGN KEY (categorie_id)  REFERENCES CATEGORIE(categorie_id),
  CONSTRAINT fk_produs_producator FOREIGN KEY (producator_id) REFERENCES PRODUCATOR(producator_id)
);

-- M:N product-to-standards
CREATE TABLE PRODUS_STANDARD(
  produs_id   NUMBER NOT NULL,
  standard_id NUMBER NOT NULL,
  CONSTRAINT pk_produs_standard PRIMARY KEY (produs_id, standard_id),
  CONSTRAINT fk_ps_produs   FOREIGN KEY (produs_id)   REFERENCES PRODUS(produs_id),
  CONSTRAINT fk_ps_standard FOREIGN KEY (standard_id) REFERENCES STANDARD(standard_id)
);

-- =======================================================
-- INVENTORY
-- =======================================================

CREATE TABLE DEPOZIT(
  depozit_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  nume  VARCHAR2(80) NOT NULL,
  oras  VARCHAR2(80) NOT NULL,
  tara  VARCHAR2(60) NOT NULL
);

CREATE TABLE STOC(
  produs_id  NUMBER NOT NULL,
  depozit_id NUMBER NOT NULL,
  cantitate  NUMBER DEFAULT 0 CHECK (cantitate >= 0),
  prag_minim NUMBER DEFAULT 0 CHECK (prag_minim >= 0),
  CONSTRAINT pk_stoc PRIMARY KEY (produs_id, depozit_id),
  CONSTRAINT fk_stoc_produs  FOREIGN KEY (produs_id)  REFERENCES PRODUS(produs_id),
  CONSTRAINT fk_stoc_depozit FOREIGN KEY (depozit_id) REFERENCES DEPOZIT(depozit_id)
);

-- =======================================================
-- SALES
-- =======================================================

CREATE TABLE CLIENT(
  client_id      NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  tip            VARCHAR2(10) NOT NULL CHECK (tip IN ('B2B','B2C')),
  nume           VARCHAR2(200) NOT NULL,
  cod_fiscal     VARCHAR2(30),
  tara           VARCHAR2(60),
  categoria_pret VARCHAR2(30),
  CONSTRAINT uq_client_cod_fiscal UNIQUE (cod_fiscal)
);

CREATE TABLE COMANDA_VANZARE(
  cv_id        NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  client_id    NUMBER NOT NULL,
  data_creare  DATE DEFAULT SYSDATE,
  status       VARCHAR2(20) NOT NULL CHECK (status IN ('DRAFT','APROBATA','EXPEDIATA','ANULATA')),
  metoda_livrare VARCHAR2(40),
  CONSTRAINT fk_cv_client FOREIGN KEY (client_id) REFERENCES CLIENT(client_id)
);

CREATE TABLE CV_LINIE(
  cv_id       NUMBER NOT NULL,
  linie_nr    NUMBER NOT NULL,
  produs_id   NUMBER NOT NULL,
  cantitate   NUMBER NOT NULL CHECK (cantitate > 0),
  pret_unitar NUMBER(12,2) NOT NULL,
  discount    NUMBER(5,2) DEFAULT 0 CHECK (discount BETWEEN 0 AND 50),
  CONSTRAINT pk_cv_linie PRIMARY KEY (cv_id, linie_nr),
  CONSTRAINT fk_cvl_cv     FOREIGN KEY (cv_id)     REFERENCES COMANDA_VANZARE(cv_id) ON DELETE CASCADE,
  CONSTRAINT fk_cvl_produs FOREIGN KEY (produs_id) REFERENCES PRODUS(produs_id)
);

-- =======================================================
-- SHIPPING & RETURNS
-- =======================================================

CREATE TABLE EXPEDIERE(
  expediere_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  cv_id        NUMBER NOT NULL,
  depozit_id   NUMBER NOT NULL,
  curier       VARCHAR2(60),
  awb          VARCHAR2(80),
  data_expedierii DATE DEFAULT SYSDATE,
  CONSTRAINT fk_exped_cv      FOREIGN KEY (cv_id)      REFERENCES COMANDA_VANZARE(cv_id),
  CONSTRAINT fk_exped_depozit FOREIGN KEY (depozit_id) REFERENCES DEPOZIT(depozit_id)
);

CREATE TABLE RMA(
  rma_id          NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  client_id       NUMBER NOT NULL,
  produs_id       NUMBER NOT NULL,
  cv_id           NUMBER,
  motiv           VARCHAR2(400),
  status          VARCHAR2(20) NOT NULL CHECK (status IN ('DESCHIS','IN_VERIFICARE','INLOCUIT','RESPINS','INCHIS')),
  data_deschidere DATE DEFAULT SYSDATE,
  data_rezolvare  DATE,
  CONSTRAINT fk_rma_client FOREIGN KEY (client_id) REFERENCES CLIENT(client_id),
  CONSTRAINT fk_rma_produs FOREIGN KEY (produs_id) REFERENCES PRODUS(produs_id),
  CONSTRAINT fk_rma_cv     FOREIGN KEY (cv_id)     REFERENCES COMANDA_VANZARE(cv_id)
);

-- =======================================================
-- Helpful indexes
-- =======================================================
CREATE INDEX ix_produs_categorie   ON PRODUS(categorie_id);
CREATE INDEX ix_produs_producator  ON PRODUS(producator_id);
CREATE INDEX ix_stoc_depozit_prod  ON STOC(depozit_id, produs_id);
CREATE INDEX ix_cvl_cv_prod        ON CV_LINIE(cv_id, produs_id);
CREATE INDEX ix_ps_standard        ON PRODUS_STANDARD(standard_id, produs_id);
CREATE INDEX ix_standard_grup_cod  ON STANDARD(grup, cod);

-- =======================================================
-- Seed minimal lookup values (optional)
-- =======================================================
INSERT INTO STANDARD(grup, cod, descriere) VALUES ('SOCKET_CPU','AM5','AMD AM5 desktop socket');
INSERT INTO STANDARD(grup, cod, descriere) VALUES ('SOCKET_CPU','LGA1700','Intel LGA1700 desktop socket');
INSERT INTO STANDARD(grup, cod, descriere) VALUES ('MEM_TYPE','DDR5','DDR5 memory');
INSERT INTO STANDARD(grup, cod, descriere) VALUES ('MEM_TYPE','DDR4','DDR4 memory');
INSERT INTO STANDARD(grup, cod, descriere) VALUES ('FORM_FACTOR_MB','ATX','ATX Motherboard');
INSERT INTO STANDARD(grup, cod, descriere) VALUES ('FORM_FACTOR_MB','mATX','Micro-ATX Motherboard');
INSERT INTO STANDARD(grup, cod, descriere) VALUES ('INTERFATA','PCIe x16','PCI Express x16 slot');
INSERT INTO STANDARD(grup, cod, descriere) VALUES ('STORAGE_FORM','M.2 2280','M.2 2280 NVMe/SATA');
INSERT INTO STANDARD(grup, cod, descriere) VALUES ('INTERFATA','SATA','Serial ATA');
COMMIT;
